// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using graphPlotter.Data;

#nullable disable

namespace graphPlotter.Migrations
{
    [DbContext(typeof(CurveFitContext))]
    [Migration("20240205205748_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("graphPlotter.Plot", b =>
                {
                    b.Property<int>("PlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Equation")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PlotImage")
                        .HasColumnType("BLOB");

                    b.HasKey("PlotId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("graphPlotter.Point", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlotId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("PlotId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("graphPlotter.Point", b =>
                {
                    b.HasOne("graphPlotter.Plot", "Plot")
                        .WithMany("Points")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");
                });

            modelBuilder.Entity("graphPlotter.Plot", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
